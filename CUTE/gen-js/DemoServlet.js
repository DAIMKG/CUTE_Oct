//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

DemoServlet_disambiguation_args = function(args) {
  this.rawInput = null;
  if (args) {
    if (args.rawInput !== undefined && args.rawInput !== null) {
      this.rawInput = Thrift.copyList(args.rawInput, [Thrift.copyList, null]);
    }
  }
};
DemoServlet_disambiguation_args.prototype = {};
DemoServlet_disambiguation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.rawInput = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          var _size111 = 0;
          var _rtmp3115;
          elem110 = [];
          var _etype114 = 0;
          _rtmp3115 = input.readListBegin();
          _etype114 = _rtmp3115.etype;
          _size111 = _rtmp3115.size;
          for (var _i116 = 0; _i116 < _size111; ++_i116)
          {
            var elem117 = null;
            elem117 = input.readString().value;
            elem110.push(elem117);
          }
          input.readListEnd();
          this.rawInput.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_disambiguation_args.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_disambiguation_args');
  if (this.rawInput !== null && this.rawInput !== undefined) {
    output.writeFieldBegin('rawInput', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.rawInput.length);
    for (var iter118 in this.rawInput)
    {
      if (this.rawInput.hasOwnProperty(iter118))
      {
        iter118 = this.rawInput[iter118];
        output.writeListBegin(Thrift.Type.STRING, iter118.length);
        for (var iter119 in iter118)
        {
          if (iter118.hasOwnProperty(iter119))
          {
            iter119 = iter118[iter119];
            output.writeString(iter119);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServlet_disambiguation_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [OneRowCandidate]);
    }
  }
};
DemoServlet_disambiguation_result.prototype = {};
DemoServlet_disambiguation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new OneRowCandidate();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_disambiguation_result.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_disambiguation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServlet_findCommonInfo_args = function(args) {
  this.input = null;
  this.requirePattern = null;
  if (args) {
    if (args.input !== undefined && args.input !== null) {
      this.input = Thrift.copyList(args.input, [Thrift.copyList, null]);
    }
    if (args.requirePattern !== undefined && args.requirePattern !== null) {
      this.requirePattern = args.requirePattern;
    }
  }
};
DemoServlet_findCommonInfo_args.prototype = {};
DemoServlet_findCommonInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.input = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          var _size135 = 0;
          var _rtmp3139;
          elem134 = [];
          var _etype138 = 0;
          _rtmp3139 = input.readListBegin();
          _etype138 = _rtmp3139.etype;
          _size135 = _rtmp3139.size;
          for (var _i140 = 0; _i140 < _size135; ++_i140)
          {
            var elem141 = null;
            elem141 = input.readString().value;
            elem134.push(elem141);
          }
          input.readListEnd();
          this.input.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.requirePattern = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_findCommonInfo_args.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_findCommonInfo_args');
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.LIST, this.input.length);
    for (var iter142 in this.input)
    {
      if (this.input.hasOwnProperty(iter142))
      {
        iter142 = this.input[iter142];
        output.writeListBegin(Thrift.Type.STRING, iter142.length);
        for (var iter143 in iter142)
        {
          if (iter142.hasOwnProperty(iter143))
          {
            iter143 = iter142[iter143];
            output.writeString(iter143);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.requirePattern !== null && this.requirePattern !== undefined) {
    output.writeFieldBegin('requirePattern', Thrift.Type.BOOL, 2);
    output.writeBool(this.requirePattern);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServlet_findCommonInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new CommonInfo(args.success);
    }
  }
};
DemoServlet_findCommonInfo_result.prototype = {};
DemoServlet_findCommonInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CommonInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_findCommonInfo_result.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_findCommonInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServlet_query_args = function(args) {
  this.info = null;
  this.input = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new CommonInfo(args.info);
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = Thrift.copyList(args.input, [Thrift.copyList, null]);
    }
  }
};
DemoServlet_query_args.prototype = {};
DemoServlet_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new CommonInfo();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.input = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          var _size151 = 0;
          var _rtmp3155;
          elem150 = [];
          var _etype154 = 0;
          _rtmp3155 = input.readListBegin();
          _etype154 = _rtmp3155.etype;
          _size151 = _rtmp3155.size;
          for (var _i156 = 0; _i156 < _size151; ++_i156)
          {
            var elem157 = null;
            elem157 = input.readString().value;
            elem150.push(elem157);
          }
          input.readListEnd();
          this.input.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_query_args.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_query_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.input.length);
    for (var iter158 in this.input)
    {
      if (this.input.hasOwnProperty(iter158))
      {
        iter158 = this.input[iter158];
        output.writeListBegin(Thrift.Type.STRING, iter158.length);
        for (var iter159 in iter158)
        {
          if (iter158.hasOwnProperty(iter159))
          {
            iter159 = iter158[iter159];
            output.writeString(iter159);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServlet_query_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SparqlAndResult(args.success);
    }
  }
};
DemoServlet_query_result.prototype = {};
DemoServlet_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SparqlAndResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_query_result.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServlet_queryWithNeg_args = function(args) {
  this.negInfo = null;
  this.sparql = null;
  if (args) {
    if (args.negInfo !== undefined && args.negInfo !== null) {
      this.negInfo = new NegCommonInfo(args.negInfo);
    }
    if (args.sparql !== undefined && args.sparql !== null) {
      this.sparql = args.sparql;
    }
  }
};
DemoServlet_queryWithNeg_args.prototype = {};
DemoServlet_queryWithNeg_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.negInfo = new NegCommonInfo();
        this.negInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.sparql = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_queryWithNeg_args.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_queryWithNeg_args');
  if (this.negInfo !== null && this.negInfo !== undefined) {
    output.writeFieldBegin('negInfo', Thrift.Type.STRUCT, 1);
    this.negInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.sparql !== null && this.sparql !== undefined) {
    output.writeFieldBegin('sparql', Thrift.Type.STRING, 2);
    output.writeString(this.sparql);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServlet_queryWithNeg_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new SparqlAndResult(args.success);
    }
  }
};
DemoServlet_queryWithNeg_result.prototype = {};
DemoServlet_queryWithNeg_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new SparqlAndResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DemoServlet_queryWithNeg_result.prototype.write = function(output) {
  output.writeStructBegin('DemoServlet_queryWithNeg_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DemoServletClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
DemoServletClient.prototype = {};
DemoServletClient.prototype.disambiguation = function(rawInput, callback) {
  this.send_disambiguation(rawInput, callback); 
  if (!callback) {
    return this.recv_disambiguation();
  }
};

DemoServletClient.prototype.send_disambiguation = function(rawInput, callback) {
  this.output.writeMessageBegin('disambiguation', Thrift.MessageType.CALL, this.seqid);
  var args = new DemoServlet_disambiguation_args();
  args.rawInput = rawInput;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_disambiguation();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DemoServletClient.prototype.recv_disambiguation = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DemoServlet_disambiguation_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'disambiguation failed: unknown result';
};
DemoServletClient.prototype.findCommonInfo = function(input, requirePattern, callback) {
  this.send_findCommonInfo(input, requirePattern, callback); 
  if (!callback) {
    return this.recv_findCommonInfo();
  }
};

DemoServletClient.prototype.send_findCommonInfo = function(input, requirePattern, callback) {
  this.output.writeMessageBegin('findCommonInfo', Thrift.MessageType.CALL, this.seqid);
  var args = new DemoServlet_findCommonInfo_args();
  args.input = input;
  args.requirePattern = requirePattern;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_findCommonInfo();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DemoServletClient.prototype.recv_findCommonInfo = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DemoServlet_findCommonInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'findCommonInfo failed: unknown result';
};
DemoServletClient.prototype.query = function(info, input, callback) {
  this.send_query(info, input, callback); 
  if (!callback) {
    return this.recv_query();
  }
};

DemoServletClient.prototype.send_query = function(info, input, callback) {
  this.output.writeMessageBegin('query', Thrift.MessageType.CALL, this.seqid);
  var args = new DemoServlet_query_args();
  args.info = info;
  args.input = input;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_query();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DemoServletClient.prototype.recv_query = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DemoServlet_query_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'query failed: unknown result';
};
DemoServletClient.prototype.queryWithNeg = function(negInfo, sparql, callback) {
  this.send_queryWithNeg(negInfo, sparql, callback); 
  if (!callback) {
    return this.recv_queryWithNeg();
  }
};

DemoServletClient.prototype.send_queryWithNeg = function(negInfo, sparql, callback) {
  this.output.writeMessageBegin('queryWithNeg', Thrift.MessageType.CALL, this.seqid);
  var args = new DemoServlet_queryWithNeg_args();
  args.negInfo = negInfo;
  args.sparql = sparql;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_queryWithNeg();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

DemoServletClient.prototype.recv_queryWithNeg = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new DemoServlet_queryWithNeg_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'queryWithNeg failed: unknown result';
};
