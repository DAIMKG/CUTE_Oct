//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Candidate = function(args) {
  this.c = null;
  if (args) {
    if (args.c !== undefined && args.c !== null) {
      this.c = Thrift.copyList(args.c, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field c is unset!');
    }
  }
};
Candidate.prototype = {};
Candidate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.c = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.c.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Candidate.prototype.write = function(output) {
  output.writeStructBegin('Candidate');
  if (this.c !== null && this.c !== undefined) {
    output.writeFieldBegin('c', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.c.length);
    for (var iter7 in this.c)
    {
      if (this.c.hasOwnProperty(iter7))
      {
        iter7 = this.c[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OneRowCandidate = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = Thrift.copyList(args.row, [Candidate]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
  }
};
OneRowCandidate.prototype = {};
OneRowCandidate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.row = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new Candidate();
          elem14.read(input);
          this.row.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OneRowCandidate.prototype.write = function(output) {
  output.writeStructBegin('OneRowCandidate');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.row.length);
    for (var iter15 in this.row)
    {
      if (this.row.hasOwnProperty(iter15))
      {
        iter15 = this.row[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OneType = function(args) {
  this.typeName = null;
  if (args) {
    if (args.typeName !== undefined && args.typeName !== null) {
      this.typeName = args.typeName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field typeName is unset!');
    }
  }
};
OneType.prototype = {};
OneType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.typeName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OneType.prototype.write = function(output) {
  output.writeStructBegin('OneType');
  if (this.typeName !== null && this.typeName !== undefined) {
    output.writeFieldBegin('typeName', Thrift.Type.STRING, 1);
    output.writeString(this.typeName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Types = function(args) {
  this.types = null;
  if (args) {
    if (args.types !== undefined && args.types !== null) {
      this.types = Thrift.copyList(args.types, [OneType]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field types is unset!');
    }
  }
};
Types.prototype = {};
Types.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.types = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new OneType();
          elem22.read(input);
          this.types.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Types.prototype.write = function(output) {
  output.writeStructBegin('Types');
  if (this.types !== null && this.types !== undefined) {
    output.writeFieldBegin('types', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.types.length);
    for (var iter23 in this.types)
    {
      if (this.types.hasOwnProperty(iter23))
      {
        iter23 = this.types[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

OneFact = function(args) {
  this.direction = null;
  this.P = null;
  this.SorO = null;
  if (args) {
    if (args.direction !== undefined && args.direction !== null) {
      this.direction = args.direction;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field direction is unset!');
    }
    if (args.P !== undefined && args.P !== null) {
      this.P = args.P;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field P is unset!');
    }
    if (args.SorO !== undefined && args.SorO !== null) {
      this.SorO = args.SorO;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field SorO is unset!');
    }
  }
};
OneFact.prototype = {};
OneFact.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.direction = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.P = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.SorO = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OneFact.prototype.write = function(output) {
  output.writeStructBegin('OneFact');
  if (this.direction !== null && this.direction !== undefined) {
    output.writeFieldBegin('direction', Thrift.Type.BOOL, 1);
    output.writeBool(this.direction);
    output.writeFieldEnd();
  }
  if (this.P !== null && this.P !== undefined) {
    output.writeFieldBegin('P', Thrift.Type.STRING, 2);
    output.writeString(this.P);
    output.writeFieldEnd();
  }
  if (this.SorO !== null && this.SorO !== undefined) {
    output.writeFieldBegin('SorO', Thrift.Type.STRING, 3);
    output.writeString(this.SorO);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Facts = function(args) {
  this.facts = null;
  if (args) {
    if (args.facts !== undefined && args.facts !== null) {
      this.facts = Thrift.copyList(args.facts, [OneFact]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field facts is unset!');
    }
  }
};
Facts.prototype = {};
Facts.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.facts = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new OneFact();
          elem30.read(input);
          this.facts.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Facts.prototype.write = function(output) {
  output.writeStructBegin('Facts');
  if (this.facts !== null && this.facts !== undefined) {
    output.writeFieldBegin('facts', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.facts.length);
    for (var iter31 in this.facts)
    {
      if (this.facts.hasOwnProperty(iter31))
      {
        iter31 = this.facts[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Edge = function(args) {
  this.s = null;
  this.p = null;
  this.o = null;
  if (args) {
    if (args.s !== undefined && args.s !== null) {
      this.s = args.s;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field s is unset!');
    }
    if (args.p !== undefined && args.p !== null) {
      this.p = args.p;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field p is unset!');
    }
    if (args.o !== undefined && args.o !== null) {
      this.o = args.o;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field o is unset!');
    }
  }
};
Edge.prototype = {};
Edge.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.s = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.p = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.o = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Edge.prototype.write = function(output) {
  output.writeStructBegin('Edge');
  if (this.s !== null && this.s !== undefined) {
    output.writeFieldBegin('s', Thrift.Type.STRING, 1);
    output.writeString(this.s);
    output.writeFieldEnd();
  }
  if (this.p !== null && this.p !== undefined) {
    output.writeFieldBegin('p', Thrift.Type.STRING, 2);
    output.writeString(this.p);
    output.writeFieldEnd();
  }
  if (this.o !== null && this.o !== undefined) {
    output.writeFieldBegin('o', Thrift.Type.STRING, 3);
    output.writeString(this.o);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonInfo = function(args) {
  this.t = null;
  this.f = null;
  this.p = null;
  if (args) {
    if (args.t !== undefined && args.t !== null) {
      this.t = Thrift.copyList(args.t, [Types]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field t is unset!');
    }
    if (args.f !== undefined && args.f !== null) {
      this.f = Thrift.copyList(args.f, [Facts]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field f is unset!');
    }
    if (args.p !== undefined && args.p !== null) {
      this.p = Thrift.copyList(args.p, [Edge]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field p is unset!');
    }
  }
};
CommonInfo.prototype = {};
CommonInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.t = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new Types();
          elem38.read(input);
          this.t.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.f = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = new Facts();
          elem45.read(input);
          this.f.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.p = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = new Edge();
          elem52.read(input);
          this.p.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonInfo.prototype.write = function(output) {
  output.writeStructBegin('CommonInfo');
  if (this.t !== null && this.t !== undefined) {
    output.writeFieldBegin('t', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.t.length);
    for (var iter53 in this.t)
    {
      if (this.t.hasOwnProperty(iter53))
      {
        iter53 = this.t[iter53];
        iter53.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.f !== null && this.f !== undefined) {
    output.writeFieldBegin('f', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.f.length);
    for (var iter54 in this.f)
    {
      if (this.f.hasOwnProperty(iter54))
      {
        iter54 = this.f[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.p !== null && this.p !== undefined) {
    output.writeFieldBegin('p', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.p.length);
    for (var iter55 in this.p)
    {
      if (this.p.hasOwnProperty(iter55))
      {
        iter55 = this.p[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Row = function(args) {
  this.row = null;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = Thrift.copyList(args.row, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field row is unset!');
    }
  }
};
Row.prototype = {};
Row.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.row = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readString().value;
          this.row.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Row.prototype.write = function(output) {
  output.writeStructBegin('Row');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.row.length);
    for (var iter63 in this.row)
    {
      if (this.row.hasOwnProperty(iter63))
      {
        iter63 = this.row[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SparqlAndResult = function(args) {
  this.sparql = null;
  this.result = null;
  if (args) {
    if (args.sparql !== undefined && args.sparql !== null) {
      this.sparql = args.sparql;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field sparql is unset!');
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = Thrift.copyList(args.result, [Row]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field result is unset!');
    }
  }
};
SparqlAndResult.prototype = {};
SparqlAndResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sparql = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.result = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new Row();
          elem70.read(input);
          this.result.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SparqlAndResult.prototype.write = function(output) {
  output.writeStructBegin('SparqlAndResult');
  if (this.sparql !== null && this.sparql !== undefined) {
    output.writeFieldBegin('sparql', Thrift.Type.STRING, 1);
    output.writeString(this.sparql);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.result.length);
    for (var iter71 in this.result)
    {
      if (this.result.hasOwnProperty(iter71))
      {
        iter71 = this.result[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Keywords = function(args) {
  this.keywords = null;
  if (args) {
    if (args.keywords !== undefined && args.keywords !== null) {
      this.keywords = Thrift.copyList(args.keywords, [null]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field keywords is unset!');
    }
  }
};
Keywords.prototype = {};
Keywords.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.keywords = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readString().value;
          this.keywords.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Keywords.prototype.write = function(output) {
  output.writeStructBegin('Keywords');
  if (this.keywords !== null && this.keywords !== undefined) {
    output.writeFieldBegin('keywords', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.keywords.length);
    for (var iter79 in this.keywords)
    {
      if (this.keywords.hasOwnProperty(iter79))
      {
        iter79 = this.keywords[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NegCommonInfo = function(args) {
  this.hasProperty = null;
  this.t = null;
  this.f = null;
  this.hasKeywords = null;
  this.k = null;
  if (args) {
    if (args.hasProperty !== undefined && args.hasProperty !== null) {
      this.hasProperty = args.hasProperty;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasProperty is unset!');
    }
    if (args.t !== undefined && args.t !== null) {
      this.t = Thrift.copyList(args.t, [Types]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field t is unset!');
    }
    if (args.f !== undefined && args.f !== null) {
      this.f = Thrift.copyList(args.f, [Facts]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field f is unset!');
    }
    if (args.hasKeywords !== undefined && args.hasKeywords !== null) {
      this.hasKeywords = args.hasKeywords;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field hasKeywords is unset!');
    }
    if (args.k !== undefined && args.k !== null) {
      this.k = Thrift.copyList(args.k, [Keywords]);
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field k is unset!');
    }
  }
};
NegCommonInfo.prototype = {};
NegCommonInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.hasProperty = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.t = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new Types();
          elem86.read(input);
          this.t.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size87 = 0;
        var _rtmp391;
        this.f = [];
        var _etype90 = 0;
        _rtmp391 = input.readListBegin();
        _etype90 = _rtmp391.etype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var elem93 = null;
          elem93 = new Facts();
          elem93.read(input);
          this.f.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.hasKeywords = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size94 = 0;
        var _rtmp398;
        this.k = [];
        var _etype97 = 0;
        _rtmp398 = input.readListBegin();
        _etype97 = _rtmp398.etype;
        _size94 = _rtmp398.size;
        for (var _i99 = 0; _i99 < _size94; ++_i99)
        {
          var elem100 = null;
          elem100 = new Keywords();
          elem100.read(input);
          this.k.push(elem100);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NegCommonInfo.prototype.write = function(output) {
  output.writeStructBegin('NegCommonInfo');
  if (this.hasProperty !== null && this.hasProperty !== undefined) {
    output.writeFieldBegin('hasProperty', Thrift.Type.BOOL, 1);
    output.writeBool(this.hasProperty);
    output.writeFieldEnd();
  }
  if (this.t !== null && this.t !== undefined) {
    output.writeFieldBegin('t', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.t.length);
    for (var iter101 in this.t)
    {
      if (this.t.hasOwnProperty(iter101))
      {
        iter101 = this.t[iter101];
        iter101.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.f !== null && this.f !== undefined) {
    output.writeFieldBegin('f', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.f.length);
    for (var iter102 in this.f)
    {
      if (this.f.hasOwnProperty(iter102))
      {
        iter102 = this.f[iter102];
        iter102.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hasKeywords !== null && this.hasKeywords !== undefined) {
    output.writeFieldBegin('hasKeywords', Thrift.Type.BOOL, 4);
    output.writeBool(this.hasKeywords);
    output.writeFieldEnd();
  }
  if (this.k !== null && this.k !== undefined) {
    output.writeFieldBegin('k', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.k.length);
    for (var iter103 in this.k)
    {
      if (this.k.hasOwnProperty(iter103))
      {
        iter103 = this.k[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

