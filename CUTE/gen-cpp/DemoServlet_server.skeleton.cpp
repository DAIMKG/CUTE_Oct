// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DemoServlet.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::demo;

class DemoServletHandler : virtual public DemoServletIf {
 public:
  DemoServletHandler() {
    // Your initialization goes here
  }

  void disambiguation(std::vector<OneRowCandidate> & _return, const std::vector<std::vector<std::string> > & rawInput) {
    // Your implementation goes here
    printf("disambiguation\n");
  }

  void findCommonInfo(CommonInfo& _return, const std::vector<std::vector<std::string> > & input, const bool requirePattern) {
    // Your implementation goes here
    printf("findCommonInfo\n");
  }

  void query(SparqlAndResult& _return, const CommonInfo& info, const std::vector<std::vector<std::string> > & input) {
    // Your implementation goes here
    printf("query\n");
  }

  void queryWithNeg(SparqlAndResult& _return, const NegCommonInfo& negInfo, const std::string& sparql) {
    // Your implementation goes here
    printf("queryWithNeg\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<DemoServletHandler> handler(new DemoServletHandler());
  shared_ptr<TProcessor> processor(new DemoServletProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

